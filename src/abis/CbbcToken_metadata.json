{
	"compiler": {
		"version": "0.8.3+commit.8d00100c"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "liquidity",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "Burn",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "settleToken",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "tradeToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "cbbc",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "leverage",
						"type": "uint8"
					},
					{
						"indexed": false,
						"internalType": "enum ICbbcToken.CbbcType",
						"name": "cbbcType",
						"type": "uint8"
					}
				],
				"name": "CbbcCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "beta_",
						"type": "int256"
					}
				],
				"name": "LogBetaUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "epoch",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "totalSupply",
						"type": "uint256"
					}
				],
				"name": "LogRebase",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "rebasePolicy",
						"type": "address"
					}
				],
				"name": "LogRebasePolicyUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "router_",
						"type": "address"
					}
				],
				"name": "LogRouterUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "liquidity",
						"type": "uint256"
					}
				],
				"name": "Mint",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					}
				],
				"name": "OwnershipRenounced",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "DOMAIN_SEPARATOR",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "EIP712_DOMAIN",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "EIP712_REVISION",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "PERMIT_TYPEHASH",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner_",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "who",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "beta",
				"outputs": [
					{
						"internalType": "int256",
						"name": "",
						"type": "int256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "burnCbbc",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "settleAmount",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "cbbcType",
				"outputs": [
					{
						"internalType": "enum ICbbcToken.CbbcType",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "subtractedValue",
						"type": "uint256"
					}
				],
				"name": "decreaseAllowance",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "factory",
				"outputs": [
					{
						"internalType": "contract ICbbcFactory",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "addedValue",
						"type": "uint256"
					}
				],
				"name": "increaseAllowance",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "name_",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "symbol_",
						"type": "string"
					},
					{
						"internalType": "uint8",
						"name": "decimals_",
						"type": "uint8"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract ICbbcFactory",
						"name": "factory_",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "settleToken_",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tradeToken_",
						"type": "address"
					},
					{
						"internalType": "uint8",
						"name": "leverage_",
						"type": "uint8"
					},
					{
						"internalType": "enum ICbbcToken.CbbcType",
						"name": "cbbcType_",
						"type": "uint8"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isOwner",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "leverage",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "mintCbbc",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "cbbcAmount",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "who",
						"type": "address"
					}
				],
				"name": "nonces",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "permit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "epoch",
						"type": "uint256"
					},
					{
						"internalType": "int256",
						"name": "supplyDelta",
						"type": "int256"
					}
				],
				"name": "rebase",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rebasePolicy",
				"outputs": [
					{
						"internalType": "contract ICbbcRebasePolicy",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rebasePrice",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rebaseTimestamp",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "router",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "who",
						"type": "address"
					}
				],
				"name": "scaledBalanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "scaledTotalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "int256",
						"name": "beta_",
						"type": "int256"
					}
				],
				"name": "setBeta",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "rebasePolicy_",
						"type": "address"
					}
				],
				"name": "setRebasePolicy",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "router_",
						"type": "address"
					}
				],
				"name": "setRouter",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "settleToken",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tradeToken",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "transferAll",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "transferAllFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "This is part of an implementation of the uFragments Ideal Money protocol.      uFragments is a normal ERC20 token, but its supply can be adjusted by splitting and      combining tokens proportionally across all wallets.      uFragment balances are internally represented with a hidden denomination, 'gons'.      We support splitting the currency in expansion and combining the currency on contraction by      changing the exchange rate between the hidden 'gons' and the public 'fragments'.Update: This is part of an implementation of the Peggedcoin Ideal Money protocol.      Peggedcoin is a normal ERC20 token, its supply can adjust by combining tokens proportionally      across all wallets during contraction and splitting tokens across all wallets during contraction      during expansion.Update: Extend peggedcoin token by implementing burn and mint",
			"kind": "dev",
			"methods": {
				"DOMAIN_SEPARATOR()": {
					"returns": {
						"_0": "The computed DOMAIN_SEPARATOR to be used off-chain services         which implement EIP-712.         https://eips.ethereum.org/EIPS/eip-2612"
					}
				},
				"allowance(address,address)": {
					"details": "Function to check the amount of tokens that an owner has allowed to a spender.",
					"params": {
						"owner_": "The address which owns the funds.",
						"spender": "The address which will spend the funds."
					},
					"returns": {
						"_0": "The number of tokens still available for the spender without potential adjustment after a rebase."
					}
				},
				"approve(address,uint256)": {
					"details": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. This method is included for ERC20 compatibility. increaseAllowance and decreaseAllowance should be used instead. Changing an allowance with this method brings the risk that someone may transfer both the old and the new allowance - if they are both greater than zero - if a transfer transaction is mined before the later approve() call is mined.",
					"params": {
						"spender": "The address which will spend the funds.",
						"value": "The amount of tokens to be spent."
					}
				},
				"balanceOf(address)": {
					"params": {
						"who": "The address to query."
					},
					"returns": {
						"_0": "The balance of the specified address without potential balance adjustment after rebase."
					}
				},
				"decimals()": {
					"returns": {
						"_0": "the number of decimals of the token."
					}
				},
				"decreaseAllowance(address,uint256)": {
					"details": "Decrease the amount of tokens that an owner has allowed to a spender.",
					"params": {
						"spender": "The address which will spend the funds.",
						"subtractedValue": "The amount of tokens to decrease the allowance by."
					}
				},
				"increaseAllowance(address,uint256)": {
					"details": "Increase the amount of tokens that an owner has allowed to a spender. This method should be used instead of approve() to avoid the double approval vulnerability described above.",
					"params": {
						"addedValue": "The amount of tokens to increase the allowance by.",
						"spender": "The address which will spend the funds."
					}
				},
				"initialize(address)": {
					"details": "The Ownable constructor sets the original `owner` of the contract to the sender account."
				},
				"isOwner()": {
					"returns": {
						"_0": "true if `msg.sender` is the owner of the contract."
					}
				},
				"name()": {
					"returns": {
						"_0": "the name of the token."
					}
				},
				"nonces(address)": {
					"returns": {
						"_0": "The number of successful permits by the specified address."
					}
				},
				"owner()": {
					"returns": {
						"_0": "the address of the owner."
					}
				},
				"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
					"details": "Allows for approvals to be made via secp256k1 signatures.",
					"params": {
						"deadline": "The deadline timestamp, type(uint256).max for max deadline",
						"owner": "The owner of the funds",
						"r": "Signature param",
						"s": "Signature param",
						"spender": "The spender",
						"v": "Signature param",
						"value": "The amount"
					}
				},
				"rebase(uint256,int256)": {
					"details": "Notifies Fragments contract about a new rebase cycle.",
					"params": {
						"supplyDelta": "The number of new fragment tokens to add into circulation via expansion."
					},
					"returns": {
						"_0": "The total number of fragments after the supply adjustment."
					}
				},
				"renounceOwnership()": {
					"details": "Allows the current owner to relinquish control of the contract."
				},
				"scaledBalanceOf(address)": {
					"params": {
						"who": "The address to query."
					},
					"returns": {
						"_0": "The gon balance of the specified address."
					}
				},
				"scaledTotalSupply()": {
					"returns": {
						"_0": "the total number of gons."
					}
				},
				"setBeta(int256)": {
					"params": {
						"beta_": "new beta value."
					}
				},
				"setRebasePolicy(address)": {
					"params": {
						"rebasePolicy_": "The address of the monetary policy contract to use for authentication."
					}
				},
				"setRouter(address)": {
					"params": {
						"router_": "The address of the monetary policy contract to use for authentication."
					}
				},
				"symbol()": {
					"returns": {
						"_0": "the symbol of the token."
					}
				},
				"totalSupply()": {
					"returns": {
						"_0": "The total number of fragments."
					}
				},
				"transfer(address,uint256)": {
					"details": "Transfer tokens to a specified address.",
					"params": {
						"to": "The address to transfer to.",
						"value": "The amount to be transferred."
					},
					"returns": {
						"_0": "True on success, false otherwise."
					}
				},
				"transferAll(address)": {
					"details": "Transfer all of the sender's wallet balance to a specified address.",
					"params": {
						"to": "The address to transfer to."
					},
					"returns": {
						"_0": "True on success, false otherwise."
					}
				},
				"transferAllFrom(address,address)": {
					"details": "Transfer all balance tokens from one address to another.",
					"params": {
						"from": "The address you want to send tokens from.",
						"to": "The address you want to transfer to."
					}
				},
				"transferFrom(address,address,uint256)": {
					"details": "Transfer tokens from one address to another.",
					"params": {
						"from": "The address you want to send tokens from.",
						"to": "The address you want to transfer to.",
						"value": "The amount of tokens to be transferred."
					}
				},
				"transferOwnership(address)": {
					"details": "Allows the current owner to transfer control of the contract to a newOwner.",
					"params": {
						"newOwner": "The address to transfer ownership to."
					}
				}
			},
			"title": "CBBC ERC20 token",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"renounceOwnership()": {
					"notice": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/CbbcToken.sol": "CbbcToken"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/CbbcToken.sol": {
			"keccak256": "0x81564782f2dc0d6cc6fe2377e88b90418a4e22ede0befcf819a8351c6682ec90",
			"urls": [
				"bzz-raw://72897407c97755b2a8b4306561109fe528ac8fdacea97ba33b5ad556e09ce091",
				"dweb:/ipfs/QmZYjvAupB9N4Jymxrdwo3gRyFkeQZ6fvShevtPKBcbGn9"
			]
		},
		"contracts/interfaces/ICbbcERC20.sol": {
			"keccak256": "0x15886141cdf6b0cbfb96a410c40fea18d9d0271069724165a71d5a1b26af4f1e",
			"urls": [
				"bzz-raw://701ef6456a5dc697e80495c347386a2410e0e8164fd8e7464140620d2e3e9f1d",
				"dweb:/ipfs/QmakcGFZ7wmN9HYwGKiCaeXU6KnACJDndsPsQVn7yEV5L3"
			]
		},
		"contracts/interfaces/ICbbcFactory.sol": {
			"keccak256": "0xddf89263d34e695db22a5cba4239bb5841e82c059058abd07b333cb878f2c4e3",
			"urls": [
				"bzz-raw://4fe850a830fd47c80f16567d7a8f8e258d8131aed77fb1375245cb7e0848727d",
				"dweb:/ipfs/QmUhGBrtHhKjvHbm1CNe2PAUjcKBDindT849SbFCH9DQwY"
			]
		},
		"contracts/interfaces/ICbbcLiquidityToken.sol": {
			"keccak256": "0xa72ee34a5de465738ccc30363c9b3edb6716877493ff004bdf41c58b53d1b8c1",
			"urls": [
				"bzz-raw://1287e43be196caf22e383a1e96d6be30ee8b1a43ca7b78e2e0b65645dd9972e1",
				"dweb:/ipfs/QmVmzoUB9TaJT9jBegD8fQgin89X4dHjtMmH7J2jXEXBcE"
			]
		},
		"contracts/interfaces/ICbbcRebasePolicy.sol": {
			"keccak256": "0x681691b27c254d991cecc36881a7e85bc53aa7f60faed0affd767f66d4cdd69d",
			"urls": [
				"bzz-raw://a9b77efbc7d35f40545e0196974fbdd0ebea9da1dc4c4cd50abb8119793729bd",
				"dweb:/ipfs/QmQxoKRantzq39RJxS4ndG32M5mwkvXX3dm68HoiR8GJ1d"
			]
		},
		"contracts/interfaces/ICbbcToken.sol": {
			"keccak256": "0x3ed222972240492b7d0e135239f8aa7804917dba99d3b79d65aec393a1419ccd",
			"urls": [
				"bzz-raw://8da971865835b76d0caf3762e89df9ff25220acf5e53fa5ae97aa30f2f9274ea",
				"dweb:/ipfs/QmeFCN45fGs2F7BW9W9wKudAMq8tQdf6vZ6p6ptTwbsFgj"
			]
		},
		"contracts/interfaces/IERC20.sol": {
			"keccak256": "0xa1c273c6fdb21a0595554ab9ba141bebb7c4056a032919c4f7a5f48263e24c07",
			"urls": [
				"bzz-raw://fcebcb676e48273ce57f9dc3aae4e6a2166657a13a0ad79f7a3ab166c9be9a66",
				"dweb:/ipfs/QmPBrdRkRaK9APwzBJ21tyL3Mq3FVses4i4JXCoDix3vn2"
			]
		},
		"contracts/interfaces/IMarketOracle.sol": {
			"keccak256": "0x5f69a69f5a679a97534d2c0c13e5587078040bd1be04d0ca76f06f6a9cddd810",
			"urls": [
				"bzz-raw://71296220cee7e984a9a81e9b74a2b071e19254039d4a5cd7762d4d138cbf267b",
				"dweb:/ipfs/QmXZ6ogaYKmUXF5BwVYF1bAhvkVsoH6V7Mj3aVwsd6yuYC"
			]
		},
		"contracts/libraries/CbbcLibrary.sol": {
			"keccak256": "0x3f41b1c4cd7a09abd0ca96d6756d2da07827a3e522f50298502d16b6a7e107fc",
			"urls": [
				"bzz-raw://eae1e03cd218f071ba3a0efac72026ec656862c161bf650dfa47f83f60c5ffde",
				"dweb:/ipfs/QmXpgtcgBazKMabUMEEff39Vemo7xJpFnkcNzhTNwm9y5F"
			]
		},
		"contracts/libraries/ERC20Detailed.sol": {
			"keccak256": "0x87cb1166de206073b867f5414cb9bf23e290b8e506524f900abb34adcddd9db7",
			"urls": [
				"bzz-raw://3256a67ca8bcd016b62b981e281a19ffcd3217e36b6baaccf9e6d5abb8a1ab1d",
				"dweb:/ipfs/QmR9MYmzEQpmiiSXDXtTJ5RpCZ1UKzM7PU2TF6h8RQ4ym5"
			]
		},
		"contracts/libraries/Initializable.sol": {
			"keccak256": "0xc4d7b514aaf67c4164f22e3915f794a84f440bf51cc69fe18f9b38c64c0db54d",
			"urls": [
				"bzz-raw://6f0b38a155cd43cb556b1c082ed57ac5241b8bf13dc9c063f0f1bc5993a734b9",
				"dweb:/ipfs/QmWELzPmyDbNw3hqyWaChikup3n8Gu4iDSLfWNn7BagSLz"
			]
		},
		"contracts/libraries/Math.sol": {
			"keccak256": "0x433eca0a04b209be65c690707d1407816449a37e74ead4a495d76cd7685830a6",
			"urls": [
				"bzz-raw://569997a720861d3a92dbd16af7fc4d28eac5de7bc771a69e66114287d5b78529",
				"dweb:/ipfs/Qmez2JLtS1X44vzEsB2pusaeKPFEhCXpVNG7LFLxJmxPFt"
			]
		},
		"contracts/libraries/Ownable.sol": {
			"keccak256": "0x7f4152498f3405dfcf6bebf506a0bf63c5c10eff783288a867863c8f1387d0c0",
			"urls": [
				"bzz-raw://cb3d0269229c000ab1fba9bc90c63ead275a73ac34c70821d5f967841dd0563c",
				"dweb:/ipfs/QmTEsbfScrrStSXwDxBzuxpijoNHAEdaKVJdemzwUmJifr"
			]
		},
		"contracts/libraries/SafeMathInt.sol": {
			"keccak256": "0x6ddfef08966af4e650b53fe6f0fcc4f4ebe3f8765657b6454fe3b8a7f5347183",
			"urls": [
				"bzz-raw://c0f62b46bad69c65ef3e63280f1fc92a32a3539226b635d17341d8fc1797160f",
				"dweb:/ipfs/QmUMduM89RY4K2qc16GEKiXuAzCuK7QV13auEd7hGm3Pzn"
			]
		}
	},
	"version": 1
}