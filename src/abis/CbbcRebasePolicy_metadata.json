{
	"compiler": {
		"version": "0.8.3+commit.8d00100c"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "epoch",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "exchangeRate",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "requestedSupplyAdjustment",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "timestampSec",
						"type": "uint256"
					}
				],
				"name": "LogRebase",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					}
				],
				"name": "OwnershipRenounced",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "cbbcToken",
				"outputs": [
					{
						"internalType": "contract ICbbcToken",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "deviationThreshold",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "epoch",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "globalAmpleforthEpochAndAMPLSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "inRebaseWindow",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner_",
						"type": "address"
					},
					{
						"internalType": "contract ICbbcToken",
						"name": "cbbcToken_",
						"type": "address"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isOwner",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "lastRebaseTimestampSec",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "marketOracle",
				"outputs": [
					{
						"internalType": "contract IMarketOracle",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "minRebaseTimeIntervalSec",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "orchestrator",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rebase",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rebaseLag",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rebaseWindowLengthSec",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rebaseWindowOffsetSec",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IMarketOracle",
						"name": "marketOracle_",
						"type": "address"
					}
				],
				"name": "setMarketOracle",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "orchestrator_",
						"type": "address"
					}
				],
				"name": "setOrchestrator",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "rebaseLag_",
						"type": "uint256"
					}
				],
				"name": "setRebaseLag",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "minRebaseTimeIntervalSec_",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rebaseWindowOffsetSec_",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rebaseWindowLengthSec_",
						"type": "uint256"
					}
				],
				"name": "setRebaseTimingParameters",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "This is an implementation of the Peggedcoin Ideal Money protocol.      Peggedcoin operates symmetrically on expansion and contraction. It will both split and      combine coins to maintain a stable unit price.      This component regulates the token supply of the Peggedcoin ERC20 token in response to      market oracles.",
			"kind": "dev",
			"methods": {
				"globalAmpleforthEpochAndAMPLSupply()": {
					"returns": {
						"_0": "globalAmpleforthEpoch The current epoch number.",
						"_1": "globalAMPLSupply The total supply at the current epoch."
					}
				},
				"inRebaseWindow()": {
					"returns": {
						"_0": "If the latest block timestamp is within the rebase time window, it returns true.         Otherwise, returns false."
					}
				},
				"initialize(address)": {
					"details": "The Ownable constructor sets the original `owner` of the contract to the sender account."
				},
				"initialize(address,address)": {
					"details": "ZOS upgradable contract initialization method.      It is called at the time of contract creation to invoke parent class initializers and      initialize the contract's state variables."
				},
				"isOwner()": {
					"returns": {
						"_0": "true if `msg.sender` is the owner of the contract."
					}
				},
				"owner()": {
					"returns": {
						"_0": "the address of the owner."
					}
				},
				"rebase()": {
					"details": "The supply adjustment equals (_totalSupply * DeviationFromTargetRate) / rebaseLag      Where DeviationFromTargetRate is (MarketOracleRate - targetRate) / targetRate      and targetRate is CpiOracleRate / baseCpi"
				},
				"renounceOwnership()": {
					"details": "Allows the current owner to relinquish control of the contract."
				},
				"setMarketOracle(address)": {
					"params": {
						"marketOracle_": "The address of the market oracle contract."
					}
				},
				"setOrchestrator(address)": {
					"params": {
						"orchestrator_": "The address of the orchestrator contract."
					}
				},
				"setRebaseLag(uint256)": {
					"params": {
						"rebaseLag_": "The new rebase lag parameter."
					}
				},
				"setRebaseTimingParameters(uint256,uint256,uint256)": {
					"params": {
						"minRebaseTimeIntervalSec_": "More than this much time must pass between rebase        operations, in seconds.",
						"rebaseWindowLengthSec_": "The length of the rebase window in seconds.",
						"rebaseWindowOffsetSec_": "The number of seconds from the beginning of the rebase interval, where the rebase window begins."
					}
				},
				"transferOwnership(address)": {
					"details": "Allows the current owner to transfer control of the contract to a newOwner.",
					"params": {
						"newOwner": "The address to transfer ownership to."
					}
				}
			},
			"title": "Peggedcoin Monetary Supply Policy",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"globalAmpleforthEpochAndAMPLSupply()": {
					"notice": "A multi-chain AMPL interface method. The Ampleforth monetary policy contract         on the base-chain and XC-AmpleController contracts on the satellite-chains         implement this method. It atomically returns two values:         what the current contract believes to be,         the globalAmpleforthEpoch and globalAMPLSupply."
				},
				"rebase()": {
					"notice": "Initiates a new rebase operation, provided the minimum time period has elapsed."
				},
				"renounceOwnership()": {
					"notice": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore."
				},
				"setMarketOracle(address)": {
					"notice": "Sets the reference to the market oracle."
				},
				"setOrchestrator(address)": {
					"notice": "Sets the reference to the orchestrator."
				},
				"setRebaseLag(uint256)": {
					"notice": "Sets the rebase lag parameter. It is used to dampen the applied supply adjustment by 1 / rebaseLag If the rebase lag R, equals 1, the smallest value for R, then the full supply correction is applied on each rebase cycle. If it is greater than 1, then a correction of 1/R of is applied on each rebase."
				},
				"setRebaseTimingParameters(uint256,uint256,uint256)": {
					"notice": "Sets the parameters which control the timing and frequency of         rebase operations.         a) the minimum time period that must elapse between rebase cycles.         b) the rebase window offset parameter.         c) the rebase window length parameter."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/CbbcRebasePolicy.sol": "CbbcRebasePolicy"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/CbbcRebasePolicy.sol": {
			"keccak256": "0xea169b670c101e7747de8d9fe2ce81a4082c32fa7932655cef388d9bc170609f",
			"urls": [
				"bzz-raw://e13f2e62d8187ebbbc3c802027124d922a452453c92b15bd3c490895d2e8adcd",
				"dweb:/ipfs/QmU7HV5fxubD49oSB3cH6nnTBeLKJjWojThYoa2Na7LDyQ"
			]
		},
		"contracts/interfaces/ICbbcFactory.sol": {
			"keccak256": "0xddf89263d34e695db22a5cba4239bb5841e82c059058abd07b333cb878f2c4e3",
			"urls": [
				"bzz-raw://4fe850a830fd47c80f16567d7a8f8e258d8131aed77fb1375245cb7e0848727d",
				"dweb:/ipfs/QmUhGBrtHhKjvHbm1CNe2PAUjcKBDindT849SbFCH9DQwY"
			]
		},
		"contracts/interfaces/ICbbcLiquidityToken.sol": {
			"keccak256": "0xa72ee34a5de465738ccc30363c9b3edb6716877493ff004bdf41c58b53d1b8c1",
			"urls": [
				"bzz-raw://1287e43be196caf22e383a1e96d6be30ee8b1a43ca7b78e2e0b65645dd9972e1",
				"dweb:/ipfs/QmVmzoUB9TaJT9jBegD8fQgin89X4dHjtMmH7J2jXEXBcE"
			]
		},
		"contracts/interfaces/ICbbcRebasePolicy.sol": {
			"keccak256": "0x681691b27c254d991cecc36881a7e85bc53aa7f60faed0affd767f66d4cdd69d",
			"urls": [
				"bzz-raw://a9b77efbc7d35f40545e0196974fbdd0ebea9da1dc4c4cd50abb8119793729bd",
				"dweb:/ipfs/QmQxoKRantzq39RJxS4ndG32M5mwkvXX3dm68HoiR8GJ1d"
			]
		},
		"contracts/interfaces/ICbbcToken.sol": {
			"keccak256": "0x3ed222972240492b7d0e135239f8aa7804917dba99d3b79d65aec393a1419ccd",
			"urls": [
				"bzz-raw://8da971865835b76d0caf3762e89df9ff25220acf5e53fa5ae97aa30f2f9274ea",
				"dweb:/ipfs/QmeFCN45fGs2F7BW9W9wKudAMq8tQdf6vZ6p6ptTwbsFgj"
			]
		},
		"contracts/interfaces/IERC20.sol": {
			"keccak256": "0xa1c273c6fdb21a0595554ab9ba141bebb7c4056a032919c4f7a5f48263e24c07",
			"urls": [
				"bzz-raw://fcebcb676e48273ce57f9dc3aae4e6a2166657a13a0ad79f7a3ab166c9be9a66",
				"dweb:/ipfs/QmPBrdRkRaK9APwzBJ21tyL3Mq3FVses4i4JXCoDix3vn2"
			]
		},
		"contracts/interfaces/IMarketOracle.sol": {
			"keccak256": "0x5f69a69f5a679a97534d2c0c13e5587078040bd1be04d0ca76f06f6a9cddd810",
			"urls": [
				"bzz-raw://71296220cee7e984a9a81e9b74a2b071e19254039d4a5cd7762d4d138cbf267b",
				"dweb:/ipfs/QmXZ6ogaYKmUXF5BwVYF1bAhvkVsoH6V7Mj3aVwsd6yuYC"
			]
		},
		"contracts/libraries/CbbcLibrary.sol": {
			"keccak256": "0x3f41b1c4cd7a09abd0ca96d6756d2da07827a3e522f50298502d16b6a7e107fc",
			"urls": [
				"bzz-raw://eae1e03cd218f071ba3a0efac72026ec656862c161bf650dfa47f83f60c5ffde",
				"dweb:/ipfs/QmXpgtcgBazKMabUMEEff39Vemo7xJpFnkcNzhTNwm9y5F"
			]
		},
		"contracts/libraries/ERC20Detailed.sol": {
			"keccak256": "0x87cb1166de206073b867f5414cb9bf23e290b8e506524f900abb34adcddd9db7",
			"urls": [
				"bzz-raw://3256a67ca8bcd016b62b981e281a19ffcd3217e36b6baaccf9e6d5abb8a1ab1d",
				"dweb:/ipfs/QmR9MYmzEQpmiiSXDXtTJ5RpCZ1UKzM7PU2TF6h8RQ4ym5"
			]
		},
		"contracts/libraries/Initializable.sol": {
			"keccak256": "0xc4d7b514aaf67c4164f22e3915f794a84f440bf51cc69fe18f9b38c64c0db54d",
			"urls": [
				"bzz-raw://6f0b38a155cd43cb556b1c082ed57ac5241b8bf13dc9c063f0f1bc5993a734b9",
				"dweb:/ipfs/QmWELzPmyDbNw3hqyWaChikup3n8Gu4iDSLfWNn7BagSLz"
			]
		},
		"contracts/libraries/Math.sol": {
			"keccak256": "0x433eca0a04b209be65c690707d1407816449a37e74ead4a495d76cd7685830a6",
			"urls": [
				"bzz-raw://569997a720861d3a92dbd16af7fc4d28eac5de7bc771a69e66114287d5b78529",
				"dweb:/ipfs/Qmez2JLtS1X44vzEsB2pusaeKPFEhCXpVNG7LFLxJmxPFt"
			]
		},
		"contracts/libraries/Ownable.sol": {
			"keccak256": "0x7f4152498f3405dfcf6bebf506a0bf63c5c10eff783288a867863c8f1387d0c0",
			"urls": [
				"bzz-raw://cb3d0269229c000ab1fba9bc90c63ead275a73ac34c70821d5f967841dd0563c",
				"dweb:/ipfs/QmTEsbfScrrStSXwDxBzuxpijoNHAEdaKVJdemzwUmJifr"
			]
		},
		"contracts/libraries/SafeMathInt.sol": {
			"keccak256": "0x6ddfef08966af4e650b53fe6f0fcc4f4ebe3f8765657b6454fe3b8a7f5347183",
			"urls": [
				"bzz-raw://c0f62b46bad69c65ef3e63280f1fc92a32a3539226b635d17341d8fc1797160f",
				"dweb:/ipfs/QmUMduM89RY4K2qc16GEKiXuAzCuK7QV13auEd7hGm3Pzn"
			]
		},
		"contracts/libraries/UInt256Lib.sol": {
			"keccak256": "0x1b3c529c4b63cc2d59430d68c8b520c3c4f30e411ade519309f454e1ce1f9c05",
			"urls": [
				"bzz-raw://f22795d1cd9a43562d66e98f2e8baa747d1499b7e4bbe40c02d6c81e2b2b5b89",
				"dweb:/ipfs/QmPmbhzdaJmyAQJkrZ1fioCVFsMhEwD6MH11hreh9QEHwu"
			]
		}
	},
	"version": 1
}